require 'elasticsearch/persistence/model'
require 'analyzers'
module Webservices
  module ApiModels
    Class.new do
      def self.model_name
        ActiveModel::Name.new(self, Webservices::ApiModels, '<%= data_source.api.classify %>')
      end

      include Elasticsearch::Persistence::Model

      settings(index: { analysis: { analyzer: { keyword_lowercase: Analyzers.definitions[:keyword_lowercase],
                                                snowball_asciifolding_nostop: Analyzers.definitions[:snowball_asciifolding_nostop]}}})
      index_name [ES::INDEX_PREFIX, "api_models", '<%= data_source.api %>', 'v<%= data_source.version_number %>'].join(':')

      <% data_source.metadata.top_level_singular_entries.each_pair do |field, metadata| %>
        attribute :<%= field %>, <%= TYPE_TO_MAPPING[metadata[:type]][:type] %>, mapping: <%= TYPE_TO_MAPPING[metadata[:type]][:mapping] %>
      <% end %>
      <% data_source.metadata.groups.each do |field| %>
        attribute :<%= field %>, Hash, mapping: { type: 'object' }
      <% end %>
      <% data_source.metadata.nested_collections.each_pair do |field, dictionary_yaml| %>
        attribute :<%= field %>, Array[Hash], mapping: { type: 'object', properties: <%= dictionary_yaml.reject { |key, _| key.to_s.start_with?('_') }.map{|f, p| [f,TYPE_TO_MAPPING[p[:type]][:mapping] ]  }.to_h %> }
      <% end %>
      attribute :_updated_at, DateTime

      def attributes
        hash = { id: nil }
        <% data_source.metadata.top_level_singular_entries.each_key do |field| %>
          hash['<%= field %>'] = nil
        <% end %>
        <% data_source.metadata.groups.each do |field| %>
          hash['<%= field %>'] = nil
        <% end %>
        <% data_source.metadata.nested_collections.keys.each do |field| %>
          hash['<%= field %>'] = nil
        <% end %>
        hash
      end
    end
  end
end
